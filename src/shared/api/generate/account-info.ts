/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * EScience.Application
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";
import { unref } from "vue";
import type { MaybeRef } from "vue";
import type { AccountInfo, AccountInfoCreateRequest } from "../model";
import { createInstance } from "../api-instance";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const accountInfoGetAll = (
  options?: SecondParameter<typeof createInstance>,
  signal?: AbortSignal,
) => {
  return createInstance<AccountInfo[]>(
    { url: `/account-info/get-all`, method: "GET", signal },
    options,
  );
};

export const getAccountInfoGetAllQueryKey = () => {
  return ["account-info", "get-all"] as const;
};

export const getAccountInfoGetAllQueryOptions = <
  TData = Awaited<ReturnType<typeof accountInfoGetAll>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof accountInfoGetAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof createInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = getAccountInfoGetAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof accountInfoGetAll>>
  > = ({ signal }) => accountInfoGetAll(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof accountInfoGetAll>>,
    TError,
    TData
  >;
};

export type AccountInfoGetAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof accountInfoGetAll>>
>;
export type AccountInfoGetAllQueryError = unknown;

export function useAccountInfoGetAll<
  TData = Awaited<ReturnType<typeof accountInfoGetAll>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof accountInfoGetAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAccountInfoGetAllQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const accountInfoCreate = (
  accountInfoCreateRequest: MaybeRef<AccountInfoCreateRequest>,
  options?: SecondParameter<typeof createInstance>,
  signal?: AbortSignal,
) => {
  accountInfoCreateRequest = unref(accountInfoCreateRequest);

  return createInstance<void>(
    {
      url: `/account-info`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: accountInfoCreateRequest,
      signal,
    },
    options,
  );
};

export const getAccountInfoCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof accountInfoCreate>>,
    TError,
    { data: AccountInfoCreateRequest },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof accountInfoCreate>>,
  TError,
  { data: AccountInfoCreateRequest },
  TContext
> => {
  const mutationKey = ["accountInfoCreate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof accountInfoCreate>>,
    { data: AccountInfoCreateRequest }
  > = (props) => {
    const { data } = props ?? {};

    return accountInfoCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AccountInfoCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof accountInfoCreate>>
>;
export type AccountInfoCreateMutationBody = AccountInfoCreateRequest;
export type AccountInfoCreateMutationError = unknown;

export const useAccountInfoCreate = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof accountInfoCreate>>,
    TError,
    { data: AccountInfoCreateRequest },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof accountInfoCreate>>,
  TError,
  { data: AccountInfoCreateRequest },
  TContext
> => {
  const mutationOptions = getAccountInfoCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const accountInfoUpdate = (
  id: MaybeRef<string>,
  accountInfoCreateRequest: MaybeRef<AccountInfoCreateRequest>,
  options?: SecondParameter<typeof createInstance>,
) => {
  id = unref(id);
  accountInfoCreateRequest = unref(accountInfoCreateRequest);

  return createInstance<void>(
    {
      url: `/account-info/${id}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: accountInfoCreateRequest,
    },
    options,
  );
};

export const getAccountInfoUpdateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof accountInfoUpdate>>,
    TError,
    { id: string; data: AccountInfoCreateRequest },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof accountInfoUpdate>>,
  TError,
  { id: string; data: AccountInfoCreateRequest },
  TContext
> => {
  const mutationKey = ["accountInfoUpdate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof accountInfoUpdate>>,
    { id: string; data: AccountInfoCreateRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return accountInfoUpdate(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AccountInfoUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof accountInfoUpdate>>
>;
export type AccountInfoUpdateMutationBody = AccountInfoCreateRequest;
export type AccountInfoUpdateMutationError = unknown;

export const useAccountInfoUpdate = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof accountInfoUpdate>>,
    TError,
    { id: string; data: AccountInfoCreateRequest },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof accountInfoUpdate>>,
  TError,
  { id: string; data: AccountInfoCreateRequest },
  TContext
> => {
  const mutationOptions = getAccountInfoUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const accountInfoDelete = (
  id: MaybeRef<string>,
  options?: SecondParameter<typeof createInstance>,
) => {
  id = unref(id);

  return createInstance<void>(
    { url: `/account-info/${id}`, method: "DELETE" },
    options,
  );
};

export const getAccountInfoDeleteMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof accountInfoDelete>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof accountInfoDelete>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["accountInfoDelete"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof accountInfoDelete>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return accountInfoDelete(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AccountInfoDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof accountInfoDelete>>
>;

export type AccountInfoDeleteMutationError = unknown;

export const useAccountInfoDelete = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof accountInfoDelete>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof accountInfoDelete>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getAccountInfoDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};
