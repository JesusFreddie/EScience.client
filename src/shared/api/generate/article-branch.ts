/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * EScience.Application
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";
import { computed, unref } from "vue";
import type { MaybeRef } from "vue";
import type {
  ArticleBranch,
  ArticleBranchDto,
  PostBranchCreateParams,
} from "../model";
import { createInstance } from "../api-instance";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const postBranchCreate = (
  params?: MaybeRef<PostBranchCreateParams>,
  options?: SecondParameter<typeof createInstance>,
  signal?: AbortSignal,
) => {
  params = unref(params);

  return createInstance<ArticleBranchDto>(
    { url: `/branch/create`, method: "POST", params: unref(params), signal },
    options,
  );
};

export const getPostBranchCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postBranchCreate>>,
    TError,
    { params?: PostBranchCreateParams },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postBranchCreate>>,
  TError,
  { params?: PostBranchCreateParams },
  TContext
> => {
  const mutationKey = ["postBranchCreate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postBranchCreate>>,
    { params?: PostBranchCreateParams }
  > = (props) => {
    const { params } = props ?? {};

    return postBranchCreate(params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostBranchCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof postBranchCreate>>
>;

export type PostBranchCreateMutationError = unknown;

export const usePostBranchCreate = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postBranchCreate>>,
    TError,
    { params?: PostBranchCreateParams },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postBranchCreate>>,
  TError,
  { params?: PostBranchCreateParams },
  TContext
> => {
  const mutationOptions = getPostBranchCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getBranchAccountNameArticleTitleBranchName = (
  accountName: MaybeRef<string>,
  articleTitle: MaybeRef<string>,
  branchName: MaybeRef<string>,
  options?: SecondParameter<typeof createInstance>,
  signal?: AbortSignal,
) => {
  accountName = unref(accountName);
  articleTitle = unref(articleTitle);
  branchName = unref(branchName);

  return createInstance<ArticleBranch>(
    {
      url: `/branch/${accountName}/${articleTitle}/${branchName}`,
      method: "GET",
      signal,
    },
    options,
  );
};

export const getGetBranchAccountNameArticleTitleBranchNameQueryKey = (
  accountName: MaybeRef<string>,
  articleTitle: MaybeRef<string>,
  branchName: MaybeRef<string>,
) => {
  return ["branch", accountName, articleTitle, branchName] as const;
};

export const getGetBranchAccountNameArticleTitleBranchNameQueryOptions = <
  TData = Awaited<
    ReturnType<typeof getBranchAccountNameArticleTitleBranchName>
  >,
  TError = unknown,
>(
  accountName: MaybeRef<string>,
  articleTitle: MaybeRef<string>,
  branchName: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getBranchAccountNameArticleTitleBranchName>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof createInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = getGetBranchAccountNameArticleTitleBranchNameQueryKey(
    accountName,
    articleTitle,
    branchName,
  );

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getBranchAccountNameArticleTitleBranchName>>
  > = ({ signal }) =>
    getBranchAccountNameArticleTitleBranchName(
      accountName,
      articleTitle,
      branchName,
      requestOptions,
      signal,
    );

  return {
    queryKey,
    queryFn,
    enabled: computed(
      () => !!(unref(accountName) && unref(articleTitle) && unref(branchName)),
    ),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getBranchAccountNameArticleTitleBranchName>>,
    TError,
    TData
  >;
};

export type GetBranchAccountNameArticleTitleBranchNameQueryResult = NonNullable<
  Awaited<ReturnType<typeof getBranchAccountNameArticleTitleBranchName>>
>;
export type GetBranchAccountNameArticleTitleBranchNameQueryError = unknown;

export function useGetBranchAccountNameArticleTitleBranchName<
  TData = Awaited<
    ReturnType<typeof getBranchAccountNameArticleTitleBranchName>
  >,
  TError = unknown,
>(
  accountName: MaybeRef<string>,
  articleTitle: MaybeRef<string>,
  branchName: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getBranchAccountNameArticleTitleBranchName>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof createInstance>;
  },
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getGetBranchAccountNameArticleTitleBranchNameQueryOptions(
      accountName,
      articleTitle,
      branchName,
      options,
    );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}
