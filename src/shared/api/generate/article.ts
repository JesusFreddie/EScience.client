/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * EScience.Application
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";
import { computed, unref } from "vue";
import type { MaybeRef } from "vue";
import type {
  Article,
  ArticleGetAllFavoriteParams,
  ArticleGetAllParams,
  ArticleGetByAccountIdParams,
  ArticleParticipant,
  CreateArticleRequest,
  EntityCount,
  SetParticipantRequest,
  UpdateArticleRequest,
} from "../model";
import { createInstance } from "../api-instance";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const articleCreate = (
  createArticleRequest: MaybeRef<CreateArticleRequest>,
  options?: SecondParameter<typeof createInstance>,
  signal?: AbortSignal,
) => {
  createArticleRequest = unref(createArticleRequest);

  return createInstance<Article>(
    {
      url: `/articles/create`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createArticleRequest,
      signal,
    },
    options,
  );
};

export const getArticleCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof articleCreate>>,
    TError,
    { data: CreateArticleRequest },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof articleCreate>>,
  TError,
  { data: CreateArticleRequest },
  TContext
> => {
  const mutationKey = ["articleCreate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof articleCreate>>,
    { data: CreateArticleRequest }
  > = (props) => {
    const { data } = props ?? {};

    return articleCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ArticleCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof articleCreate>>
>;
export type ArticleCreateMutationBody = CreateArticleRequest;
export type ArticleCreateMutationError = unknown;

export const useArticleCreate = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof articleCreate>>,
    TError,
    { data: CreateArticleRequest },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof articleCreate>>,
  TError,
  { data: CreateArticleRequest },
  TContext
> => {
  const mutationOptions = getArticleCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const articleUpdate = (
  articleId: MaybeRef<string>,
  updateArticleRequest: MaybeRef<UpdateArticleRequest>,
  options?: SecondParameter<typeof createInstance>,
) => {
  articleId = unref(articleId);
  updateArticleRequest = unref(updateArticleRequest);

  return createInstance<Article>(
    {
      url: `/articles/${articleId}/update`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateArticleRequest,
    },
    options,
  );
};

export const getArticleUpdateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof articleUpdate>>,
    TError,
    { articleId: string; data: UpdateArticleRequest },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof articleUpdate>>,
  TError,
  { articleId: string; data: UpdateArticleRequest },
  TContext
> => {
  const mutationKey = ["articleUpdate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof articleUpdate>>,
    { articleId: string; data: UpdateArticleRequest }
  > = (props) => {
    const { articleId, data } = props ?? {};

    return articleUpdate(articleId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ArticleUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof articleUpdate>>
>;
export type ArticleUpdateMutationBody = UpdateArticleRequest;
export type ArticleUpdateMutationError = unknown;

export const useArticleUpdate = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof articleUpdate>>,
    TError,
    { articleId: string; data: UpdateArticleRequest },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof articleUpdate>>,
  TError,
  { articleId: string; data: UpdateArticleRequest },
  TContext
> => {
  const mutationOptions = getArticleUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const articleGetAll = (
  params?: MaybeRef<ArticleGetAllParams>,
  options?: SecondParameter<typeof createInstance>,
  signal?: AbortSignal,
) => {
  params = unref(params);

  return createInstance<void>(
    { url: `/articles`, method: "GET", params: unref(params), signal },
    options,
  );
};

export const getArticleGetAllQueryKey = (
  params?: MaybeRef<ArticleGetAllParams>,
) => {
  return ["articles", ...(params ? [params] : [])] as const;
};

export const getArticleGetAllQueryOptions = <
  TData = Awaited<ReturnType<typeof articleGetAll>>,
  TError = unknown,
>(
  params?: MaybeRef<ArticleGetAllParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof articleGetAll>>, TError, TData>
    >;
    request?: SecondParameter<typeof createInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = getArticleGetAllQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof articleGetAll>>> = ({
    signal,
  }) => articleGetAll(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof articleGetAll>>,
    TError,
    TData
  >;
};

export type ArticleGetAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof articleGetAll>>
>;
export type ArticleGetAllQueryError = unknown;

export function useArticleGetAll<
  TData = Awaited<ReturnType<typeof articleGetAll>>,
  TError = unknown,
>(
  params?: MaybeRef<ArticleGetAllParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof articleGetAll>>, TError, TData>
    >;
    request?: SecondParameter<typeof createInstance>;
  },
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getArticleGetAllQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const articleGetAllByCreated = (
  options?: SecondParameter<typeof createInstance>,
  signal?: AbortSignal,
) => {
  return createInstance<Article[]>(
    { url: `/articles/created`, method: "GET", signal },
    options,
  );
};

export const getArticleGetAllByCreatedQueryKey = () => {
  return ["articles", "created"] as const;
};

export const getArticleGetAllByCreatedQueryOptions = <
  TData = Awaited<ReturnType<typeof articleGetAllByCreated>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof articleGetAllByCreated>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof createInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = getArticleGetAllByCreatedQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof articleGetAllByCreated>>
  > = ({ signal }) => articleGetAllByCreated(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof articleGetAllByCreated>>,
    TError,
    TData
  >;
};

export type ArticleGetAllByCreatedQueryResult = NonNullable<
  Awaited<ReturnType<typeof articleGetAllByCreated>>
>;
export type ArticleGetAllByCreatedQueryError = unknown;

export function useArticleGetAllByCreated<
  TData = Awaited<ReturnType<typeof articleGetAllByCreated>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof articleGetAllByCreated>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getArticleGetAllByCreatedQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const articleGetAllFavorite = (
  params?: MaybeRef<ArticleGetAllFavoriteParams>,
  options?: SecondParameter<typeof createInstance>,
  signal?: AbortSignal,
) => {
  params = unref(params);

  return createInstance<void>(
    { url: `/articles/favorite`, method: "GET", params: unref(params), signal },
    options,
  );
};

export const getArticleGetAllFavoriteQueryKey = (
  params?: MaybeRef<ArticleGetAllFavoriteParams>,
) => {
  return ["articles", "favorite", ...(params ? [params] : [])] as const;
};

export const getArticleGetAllFavoriteQueryOptions = <
  TData = Awaited<ReturnType<typeof articleGetAllFavorite>>,
  TError = unknown,
>(
  params?: MaybeRef<ArticleGetAllFavoriteParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof articleGetAllFavorite>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof createInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = getArticleGetAllFavoriteQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof articleGetAllFavorite>>
  > = ({ signal }) => articleGetAllFavorite(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof articleGetAllFavorite>>,
    TError,
    TData
  >;
};

export type ArticleGetAllFavoriteQueryResult = NonNullable<
  Awaited<ReturnType<typeof articleGetAllFavorite>>
>;
export type ArticleGetAllFavoriteQueryError = unknown;

export function useArticleGetAllFavorite<
  TData = Awaited<ReturnType<typeof articleGetAllFavorite>>,
  TError = unknown,
>(
  params?: MaybeRef<ArticleGetAllFavoriteParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof articleGetAllFavorite>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof createInstance>;
  },
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getArticleGetAllFavoriteQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const articleGetByAccountId = (
  accountId: MaybeRef<string>,
  params?: MaybeRef<ArticleGetByAccountIdParams>,
  options?: SecondParameter<typeof createInstance>,
  signal?: AbortSignal,
) => {
  accountId = unref(accountId);
  params = unref(params);

  return createInstance<Article[]>(
    {
      url: `/articles/id/${accountId}`,
      method: "GET",
      params: unref(params),
      signal,
    },
    options,
  );
};

export const getArticleGetByAccountIdQueryKey = (
  accountId: MaybeRef<string>,
  params?: MaybeRef<ArticleGetByAccountIdParams>,
) => {
  return ["articles", "id", accountId, ...(params ? [params] : [])] as const;
};

export const getArticleGetByAccountIdQueryOptions = <
  TData = Awaited<ReturnType<typeof articleGetByAccountId>>,
  TError = unknown,
>(
  accountId: MaybeRef<string>,
  params?: MaybeRef<ArticleGetByAccountIdParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof articleGetByAccountId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof createInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = getArticleGetByAccountIdQueryKey(accountId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof articleGetByAccountId>>
  > = ({ signal }) =>
    articleGetByAccountId(accountId, params, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(accountId)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof articleGetByAccountId>>,
    TError,
    TData
  >;
};

export type ArticleGetByAccountIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof articleGetByAccountId>>
>;
export type ArticleGetByAccountIdQueryError = unknown;

export function useArticleGetByAccountId<
  TData = Awaited<ReturnType<typeof articleGetByAccountId>>,
  TError = unknown,
>(
  accountId: MaybeRef<string>,
  params?: MaybeRef<ArticleGetByAccountIdParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof articleGetByAccountId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof createInstance>;
  },
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getArticleGetByAccountIdQueryOptions(
    accountId,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const articleGetCountByAccountId = (
  accountId: MaybeRef<string>,
  options?: SecondParameter<typeof createInstance>,
  signal?: AbortSignal,
) => {
  accountId = unref(accountId);

  return createInstance<EntityCount>(
    { url: `/articles/count/${accountId}`, method: "GET", signal },
    options,
  );
};

export const getArticleGetCountByAccountIdQueryKey = (
  accountId: MaybeRef<string>,
) => {
  return ["articles", "count", accountId] as const;
};

export const getArticleGetCountByAccountIdQueryOptions = <
  TData = Awaited<ReturnType<typeof articleGetCountByAccountId>>,
  TError = unknown,
>(
  accountId: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof articleGetCountByAccountId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof createInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = getArticleGetCountByAccountIdQueryKey(accountId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof articleGetCountByAccountId>>
  > = ({ signal }) =>
    articleGetCountByAccountId(accountId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(accountId)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof articleGetCountByAccountId>>,
    TError,
    TData
  >;
};

export type ArticleGetCountByAccountIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof articleGetCountByAccountId>>
>;
export type ArticleGetCountByAccountIdQueryError = unknown;

export function useArticleGetCountByAccountId<
  TData = Awaited<ReturnType<typeof articleGetCountByAccountId>>,
  TError = unknown,
>(
  accountId: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof articleGetCountByAccountId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof createInstance>;
  },
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getArticleGetCountByAccountIdQueryOptions(
    accountId,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const articleGet = (
  articleId: MaybeRef<string>,
  options?: SecondParameter<typeof createInstance>,
  signal?: AbortSignal,
) => {
  articleId = unref(articleId);

  return createInstance<Article>(
    { url: `/articles/${articleId}`, method: "GET", signal },
    options,
  );
};

export const getArticleGetQueryKey = (articleId: MaybeRef<string>) => {
  return ["articles", articleId] as const;
};

export const getArticleGetQueryOptions = <
  TData = Awaited<ReturnType<typeof articleGet>>,
  TError = unknown,
>(
  articleId: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof articleGet>>, TError, TData>
    >;
    request?: SecondParameter<typeof createInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = getArticleGetQueryKey(articleId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof articleGet>>> = ({
    signal,
  }) => articleGet(articleId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(articleId)),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof articleGet>>, TError, TData>;
};

export type ArticleGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof articleGet>>
>;
export type ArticleGetQueryError = unknown;

export function useArticleGet<
  TData = Awaited<ReturnType<typeof articleGet>>,
  TError = unknown,
>(
  articleId: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof articleGet>>, TError, TData>
    >;
    request?: SecondParameter<typeof createInstance>;
  },
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getArticleGetQueryOptions(articleId, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const articleSetParticipant = (
  articleId: MaybeRef<string>,
  setParticipantRequest: MaybeRef<SetParticipantRequest>,
  options?: SecondParameter<typeof createInstance>,
  signal?: AbortSignal,
) => {
  articleId = unref(articleId);
  setParticipantRequest = unref(setParticipantRequest);

  return createInstance<ArticleParticipant>(
    {
      url: `/articles/set_participant_for_article/${articleId}`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: setParticipantRequest,
      signal,
    },
    options,
  );
};

export const getArticleSetParticipantMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof articleSetParticipant>>,
    TError,
    { articleId: string; data: SetParticipantRequest },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof articleSetParticipant>>,
  TError,
  { articleId: string; data: SetParticipantRequest },
  TContext
> => {
  const mutationKey = ["articleSetParticipant"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof articleSetParticipant>>,
    { articleId: string; data: SetParticipantRequest }
  > = (props) => {
    const { articleId, data } = props ?? {};

    return articleSetParticipant(articleId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ArticleSetParticipantMutationResult = NonNullable<
  Awaited<ReturnType<typeof articleSetParticipant>>
>;
export type ArticleSetParticipantMutationBody = SetParticipantRequest;
export type ArticleSetParticipantMutationError = unknown;

export const useArticleSetParticipant = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof articleSetParticipant>>,
    TError,
    { articleId: string; data: SetParticipantRequest },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof articleSetParticipant>>,
  TError,
  { articleId: string; data: SetParticipantRequest },
  TContext
> => {
  const mutationOptions = getArticleSetParticipantMutationOptions(options);

  return useMutation(mutationOptions);
};
