/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * EScience.Application
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";
import { computed, unref } from "vue";
import type { MaybeRef } from "vue";
import type {
  Article,
  ArticleParticipant,
  CreateArticleRequest,
  SetParticipantRequest,
} from "../model";
import { createInstance } from "../api-instance";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const postArticlesCreate = (
  createArticleRequest: MaybeRef<CreateArticleRequest>,
  options?: SecondParameter<typeof createInstance>,
  signal?: AbortSignal,
) => {
  createArticleRequest = unref(createArticleRequest);

  return createInstance<Article>(
    {
      url: `/articles/create`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createArticleRequest,
      signal,
    },
    options,
  );
};

export const getPostArticlesCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postArticlesCreate>>,
    TError,
    { data: CreateArticleRequest },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postArticlesCreate>>,
  TError,
  { data: CreateArticleRequest },
  TContext
> => {
  const mutationKey = ["postArticlesCreate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postArticlesCreate>>,
    { data: CreateArticleRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postArticlesCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostArticlesCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof postArticlesCreate>>
>;
export type PostArticlesCreateMutationBody = CreateArticleRequest;
export type PostArticlesCreateMutationError = unknown;

export const usePostArticlesCreate = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postArticlesCreate>>,
    TError,
    { data: CreateArticleRequest },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postArticlesCreate>>,
  TError,
  { data: CreateArticleRequest },
  TContext
> => {
  const mutationOptions = getPostArticlesCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getArticles = (
  options?: SecondParameter<typeof createInstance>,
  signal?: AbortSignal,
) => {
  return createInstance<Article[]>(
    { url: `/articles`, method: "GET", signal },
    options,
  );
};

export const getGetArticlesQueryKey = () => {
  return ["articles"] as const;
};

export const getGetArticlesQueryOptions = <
  TData = Awaited<ReturnType<typeof getArticles>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getArticles>>, TError, TData>
  >;
  request?: SecondParameter<typeof createInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = getGetArticlesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getArticles>>> = ({
    signal,
  }) => getArticles(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getArticles>>,
    TError,
    TData
  >;
};

export type GetArticlesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getArticles>>
>;
export type GetArticlesQueryError = unknown;

export function useGetArticles<
  TData = Awaited<ReturnType<typeof getArticles>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getArticles>>, TError, TData>
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetArticlesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const getArticlesArticleId = (
  articleId: MaybeRef<string>,
  options?: SecondParameter<typeof createInstance>,
  signal?: AbortSignal,
) => {
  articleId = unref(articleId);

  return createInstance<Article>(
    { url: `/articles/${articleId}`, method: "GET", signal },
    options,
  );
};

export const getGetArticlesArticleIdQueryKey = (
  articleId: MaybeRef<string>,
) => {
  return ["articles", articleId] as const;
};

export const getGetArticlesArticleIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getArticlesArticleId>>,
  TError = unknown,
>(
  articleId: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getArticlesArticleId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof createInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = getGetArticlesArticleIdQueryKey(articleId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getArticlesArticleId>>
  > = ({ signal }) => getArticlesArticleId(articleId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(articleId)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getArticlesArticleId>>,
    TError,
    TData
  >;
};

export type GetArticlesArticleIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getArticlesArticleId>>
>;
export type GetArticlesArticleIdQueryError = unknown;

export function useGetArticlesArticleId<
  TData = Awaited<ReturnType<typeof getArticlesArticleId>>,
  TError = unknown,
>(
  articleId: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getArticlesArticleId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof createInstance>;
  },
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetArticlesArticleIdQueryOptions(articleId, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const postArticlesSetParticipantForArticleArticleId = (
  articleId: MaybeRef<string>,
  setParticipantRequest: MaybeRef<SetParticipantRequest>,
  options?: SecondParameter<typeof createInstance>,
  signal?: AbortSignal,
) => {
  articleId = unref(articleId);
  setParticipantRequest = unref(setParticipantRequest);

  return createInstance<ArticleParticipant>(
    {
      url: `/articles/set_participant_for_article/${articleId}`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: setParticipantRequest,
      signal,
    },
    options,
  );
};

export const getPostArticlesSetParticipantForArticleArticleIdMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postArticlesSetParticipantForArticleArticleId>>,
    TError,
    { articleId: string; data: SetParticipantRequest },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postArticlesSetParticipantForArticleArticleId>>,
  TError,
  { articleId: string; data: SetParticipantRequest },
  TContext
> => {
  const mutationKey = ["postArticlesSetParticipantForArticleArticleId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postArticlesSetParticipantForArticleArticleId>>,
    { articleId: string; data: SetParticipantRequest }
  > = (props) => {
    const { articleId, data } = props ?? {};

    return postArticlesSetParticipantForArticleArticleId(
      articleId,
      data,
      requestOptions,
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type PostArticlesSetParticipantForArticleArticleIdMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof postArticlesSetParticipantForArticleArticleId>>
  >;
export type PostArticlesSetParticipantForArticleArticleIdMutationBody =
  SetParticipantRequest;
export type PostArticlesSetParticipantForArticleArticleIdMutationError =
  unknown;

export const usePostArticlesSetParticipantForArticleArticleId = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postArticlesSetParticipantForArticleArticleId>>,
    TError,
    { articleId: string; data: SetParticipantRequest },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postArticlesSetParticipantForArticleArticleId>>,
  TError,
  { articleId: string; data: SetParticipantRequest },
  TContext
> => {
  const mutationOptions =
    getPostArticlesSetParticipantForArticleArticleIdMutationOptions(options);

  return useMutation(mutationOptions);
};
