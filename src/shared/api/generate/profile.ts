/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * EScience.Application
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";
import { computed, unref } from "vue";
import type { MaybeRef } from "vue";
import type { ProfileUploadAvatarBody } from "../model";
import { createInstance } from "../api-instance";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const profileUploadAvatar = (
  profileUploadAvatarBody: MaybeRef<ProfileUploadAvatarBody>,
  options?: SecondParameter<typeof createInstance>,
  signal?: AbortSignal,
) => {
  profileUploadAvatarBody = unref(profileUploadAvatarBody);
  const formData = new FormData();
  if (profileUploadAvatarBody.file !== undefined) {
    formData.append("file", profileUploadAvatarBody.file);
  }

  return createInstance<void>(
    {
      url: `/profile/avatar`,
      method: "POST",
      headers: { "Content-Type": "multipart/form-data" },
      data: formData,
      signal,
    },
    options,
  );
};

export const getProfileUploadAvatarMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof profileUploadAvatar>>,
    TError,
    { data: ProfileUploadAvatarBody },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof profileUploadAvatar>>,
  TError,
  { data: ProfileUploadAvatarBody },
  TContext
> => {
  const mutationKey = ["profileUploadAvatar"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof profileUploadAvatar>>,
    { data: ProfileUploadAvatarBody }
  > = (props) => {
    const { data } = props ?? {};

    return profileUploadAvatar(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ProfileUploadAvatarMutationResult = NonNullable<
  Awaited<ReturnType<typeof profileUploadAvatar>>
>;
export type ProfileUploadAvatarMutationBody = ProfileUploadAvatarBody;
export type ProfileUploadAvatarMutationError = unknown;

export const useProfileUploadAvatar = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof profileUploadAvatar>>,
    TError,
    { data: ProfileUploadAvatarBody },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof profileUploadAvatar>>,
  TError,
  { data: ProfileUploadAvatarBody },
  TContext
> => {
  const mutationOptions = getProfileUploadAvatarMutationOptions(options);

  return useMutation(mutationOptions);
};
export const profileGetAvatars = (
  userId: MaybeRef<string>,
  options?: SecondParameter<typeof createInstance>,
  signal?: AbortSignal,
) => {
  userId = unref(userId);

  return createInstance<Blob>(
    {
      url: `/profile/avatars/${userId}`,
      method: "GET",
      responseType: "blob",
      signal,
    },
    options,
  );
};

export const getProfileGetAvatarsQueryKey = (userId: MaybeRef<string>) => {
  return ["profile", "avatars", userId] as const;
};

export const getProfileGetAvatarsQueryOptions = <
  TData = Awaited<ReturnType<typeof profileGetAvatars>>,
  TError = unknown,
>(
  userId: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof profileGetAvatars>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof createInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = getProfileGetAvatarsQueryKey(userId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof profileGetAvatars>>
  > = ({ signal }) => profileGetAvatars(userId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(userId)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof profileGetAvatars>>,
    TError,
    TData
  >;
};

export type ProfileGetAvatarsQueryResult = NonNullable<
  Awaited<ReturnType<typeof profileGetAvatars>>
>;
export type ProfileGetAvatarsQueryError = unknown;

export function useProfileGetAvatars<
  TData = Awaited<ReturnType<typeof profileGetAvatars>>,
  TError = unknown,
>(
  userId: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof profileGetAvatars>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof createInstance>;
  },
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getProfileGetAvatarsQueryOptions(userId, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const profileGetAvatarSession = (
  options?: SecondParameter<typeof createInstance>,
  signal?: AbortSignal,
) => {
  return createInstance<Blob>(
    {
      url: `/profile/avatars/session`,
      method: "GET",
      responseType: "blob",
      signal,
    },
    options,
  );
};

export const getProfileGetAvatarSessionQueryKey = () => {
  return ["profile", "avatars", "session"] as const;
};

export const getProfileGetAvatarSessionQueryOptions = <
  TData = Awaited<ReturnType<typeof profileGetAvatarSession>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof profileGetAvatarSession>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof createInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = getProfileGetAvatarSessionQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof profileGetAvatarSession>>
  > = ({ signal }) => profileGetAvatarSession(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof profileGetAvatarSession>>,
    TError,
    TData
  >;
};

export type ProfileGetAvatarSessionQueryResult = NonNullable<
  Awaited<ReturnType<typeof profileGetAvatarSession>>
>;
export type ProfileGetAvatarSessionQueryError = unknown;

export function useProfileGetAvatarSession<
  TData = Awaited<ReturnType<typeof profileGetAvatarSession>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof profileGetAvatarSession>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getProfileGetAvatarSessionQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}
