/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * EScience.Application
 * OpenAPI spec version: 1.0
 */
import { useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";
import { computed, unref } from "vue";
import type { MaybeRef } from "vue";
import type { Article } from "../model";
import { createInstance } from "../api-instance";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const getAccountAccountNameArticleArticleName = (
  accountName: MaybeRef<string>,
  articleName: MaybeRef<string>,
  options?: SecondParameter<typeof createInstance>,
  signal?: AbortSignal,
) => {
  accountName = unref(accountName);
  articleName = unref(articleName);

  return createInstance<Article>(
    {
      url: `/account/${accountName}/article/${articleName}`,
      method: "GET",
      signal,
    },
    options,
  );
};

export const getGetAccountAccountNameArticleArticleNameQueryKey = (
  accountName: MaybeRef<string>,
  articleName: MaybeRef<string>,
) => {
  return ["account", accountName, "article", articleName] as const;
};

export const getGetAccountAccountNameArticleArticleNameQueryOptions = <
  TData = Awaited<ReturnType<typeof getAccountAccountNameArticleArticleName>>,
  TError = unknown,
>(
  accountName: MaybeRef<string>,
  articleName: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAccountAccountNameArticleArticleName>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof createInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = getGetAccountAccountNameArticleArticleNameQueryKey(
    accountName,
    articleName,
  );

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAccountAccountNameArticleArticleName>>
  > = ({ signal }) =>
    getAccountAccountNameArticleArticleName(
      accountName,
      articleName,
      requestOptions,
      signal,
    );

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!(unref(accountName) && unref(articleName))),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getAccountAccountNameArticleArticleName>>,
    TError,
    TData
  >;
};

export type GetAccountAccountNameArticleArticleNameQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAccountAccountNameArticleArticleName>>
>;
export type GetAccountAccountNameArticleArticleNameQueryError = unknown;

export function useGetAccountAccountNameArticleArticleName<
  TData = Awaited<ReturnType<typeof getAccountAccountNameArticleArticleName>>,
  TError = unknown,
>(
  accountName: MaybeRef<string>,
  articleName: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAccountAccountNameArticleArticleName>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof createInstance>;
  },
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetAccountAccountNameArticleArticleNameQueryOptions(
    accountName,
    articleName,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}
