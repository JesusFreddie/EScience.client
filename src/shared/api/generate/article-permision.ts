/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * EScience.Application
 * OpenAPI spec version: 1.0
 */
import { useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";
import { computed, unref } from "vue";
import type { MaybeRef } from "vue";
import type { ArticlePermissionLevel } from "../model";
import { createInstance } from "../api-instance";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const permisionGet = (
  articleId: MaybeRef<string>,
  options?: SecondParameter<typeof createInstance>,
  signal?: AbortSignal,
) => {
  articleId = unref(articleId);

  return createInstance<ArticlePermissionLevel>(
    { url: `/permision/article/${articleId}`, method: "GET", signal },
    options,
  );
};

export const getPermisionGetQueryKey = (articleId: MaybeRef<string>) => {
  return ["permision", "article", articleId] as const;
};

export const getPermisionGetQueryOptions = <
  TData = Awaited<ReturnType<typeof permisionGet>>,
  TError = unknown,
>(
  articleId: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof permisionGet>>, TError, TData>
    >;
    request?: SecondParameter<typeof createInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = getPermisionGetQueryKey(articleId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof permisionGet>>> = ({
    signal,
  }) => permisionGet(articleId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(articleId)),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof permisionGet>>, TError, TData>;
};

export type PermisionGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof permisionGet>>
>;
export type PermisionGetQueryError = unknown;

export function usePermisionGet<
  TData = Awaited<ReturnType<typeof permisionGet>>,
  TError = unknown,
>(
  articleId: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof permisionGet>>, TError, TData>
    >;
    request?: SecondParameter<typeof createInstance>;
  },
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getPermisionGetQueryOptions(articleId, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}
