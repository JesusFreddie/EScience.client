/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * EScience.Application
 * OpenAPI spec version: 1.0
 */
import { useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";
import { unref } from "vue";
import type { MaybeRef } from "vue";
import type { AccountDto, GetAccountParams } from "../model";
import { createInstance } from "../api-instance";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const getAccount = (
  params?: MaybeRef<GetAccountParams>,
  options?: SecondParameter<typeof createInstance>,
  signal?: AbortSignal,
) => {
  params = unref(params);

  return createInstance<AccountDto>(
    { url: `/account`, method: "GET", params: unref(params), signal },
    options,
  );
};

export const getGetAccountQueryKey = (params?: MaybeRef<GetAccountParams>) => {
  return ["account", ...(params ? [params] : [])] as const;
};

export const getGetAccountQueryOptions = <
  TData = Awaited<ReturnType<typeof getAccount>>,
  TError = unknown,
>(
  params?: MaybeRef<GetAccountParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAccount>>, TError, TData>
    >;
    request?: SecondParameter<typeof createInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = getGetAccountQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAccount>>> = ({
    signal,
  }) => getAccount(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAccount>>,
    TError,
    TData
  >;
};

export type GetAccountQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAccount>>
>;
export type GetAccountQueryError = unknown;

export function useGetAccount<
  TData = Awaited<ReturnType<typeof getAccount>>,
  TError = unknown,
>(
  params?: MaybeRef<GetAccountParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAccount>>, TError, TData>
    >;
    request?: SecondParameter<typeof createInstance>;
  },
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetAccountQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}
