/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * EScience.Application
 * OpenAPI spec version: 1.0
 */
import { useMutation } from "@tanstack/vue-query";
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationReturnType,
} from "@tanstack/vue-query";
import { unref } from "vue";
import type { MaybeRef } from "vue";
import { createInstance } from "../api-instance";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const setFavorite = (
  articleId: MaybeRef<string>,
  options?: SecondParameter<typeof createInstance>,
  signal?: AbortSignal,
) => {
  articleId = unref(articleId);

  return createInstance<void>(
    { url: `/favorite/${articleId}/set`, method: "POST", signal },
    options,
  );
};

export const getSetFavoriteMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof setFavorite>>,
    TError,
    { articleId: string },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof setFavorite>>,
  TError,
  { articleId: string },
  TContext
> => {
  const mutationKey = ["setFavorite"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof setFavorite>>,
    { articleId: string }
  > = (props) => {
    const { articleId } = props ?? {};

    return setFavorite(articleId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SetFavoriteMutationResult = NonNullable<
  Awaited<ReturnType<typeof setFavorite>>
>;

export type SetFavoriteMutationError = unknown;

export const useSetFavorite = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof setFavorite>>,
    TError,
    { articleId: string },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof setFavorite>>,
  TError,
  { articleId: string },
  TContext
> => {
  const mutationOptions = getSetFavoriteMutationOptions(options);

  return useMutation(mutationOptions);
};
export const removeFavorite = (
  articleId: MaybeRef<string>,
  options?: SecondParameter<typeof createInstance>,
  signal?: AbortSignal,
) => {
  articleId = unref(articleId);

  return createInstance<void>(
    { url: `/favorite/${articleId}/remove`, method: "POST", signal },
    options,
  );
};

export const getRemoveFavoriteMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof removeFavorite>>,
    TError,
    { articleId: string },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof removeFavorite>>,
  TError,
  { articleId: string },
  TContext
> => {
  const mutationKey = ["removeFavorite"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof removeFavorite>>,
    { articleId: string }
  > = (props) => {
    const { articleId } = props ?? {};

    return removeFavorite(articleId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RemoveFavoriteMutationResult = NonNullable<
  Awaited<ReturnType<typeof removeFavorite>>
>;

export type RemoveFavoriteMutationError = unknown;

export const useRemoveFavorite = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof removeFavorite>>,
    TError,
    { articleId: string },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof removeFavorite>>,
  TError,
  { articleId: string },
  TContext
> => {
  const mutationOptions = getRemoveFavoriteMutationOptions(options);

  return useMutation(mutationOptions);
};
