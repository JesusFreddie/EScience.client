/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * EScience.Application
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";
import { unref } from "vue";
import type { MaybeRef } from "vue";
import type { EntityCount, Notification } from "../model";
import { createInstance } from "../api-instance";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const notificationGet = (
  options?: SecondParameter<typeof createInstance>,
  signal?: AbortSignal,
) => {
  return createInstance<Notification[]>(
    { url: `/notification`, method: "GET", signal },
    options,
  );
};

export const getNotificationGetQueryKey = () => {
  return ["notification"] as const;
};

export const getNotificationGetQueryOptions = <
  TData = Awaited<ReturnType<typeof notificationGet>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof notificationGet>>, TError, TData>
  >;
  request?: SecondParameter<typeof createInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = getNotificationGetQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof notificationGet>>> = ({
    signal,
  }) => notificationGet(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof notificationGet>>,
    TError,
    TData
  >;
};

export type NotificationGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof notificationGet>>
>;
export type NotificationGetQueryError = unknown;

export function useNotificationGet<
  TData = Awaited<ReturnType<typeof notificationGet>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof notificationGet>>, TError, TData>
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getNotificationGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const notificationMarkRead = (
  id: MaybeRef<number>,
  options?: SecondParameter<typeof createInstance>,
) => {
  id = unref(id);

  return createInstance<void>(
    { url: `/notification/read/${id}`, method: "PUT" },
    options,
  );
};

export const getNotificationMarkReadMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof notificationMarkRead>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof notificationMarkRead>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ["notificationMarkRead"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof notificationMarkRead>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return notificationMarkRead(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type NotificationMarkReadMutationResult = NonNullable<
  Awaited<ReturnType<typeof notificationMarkRead>>
>;

export type NotificationMarkReadMutationError = unknown;

export const useNotificationMarkRead = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof notificationMarkRead>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof notificationMarkRead>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getNotificationMarkReadMutationOptions(options);

  return useMutation(mutationOptions);
};
export const notificationMarkReadAll = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    { url: `/notification/read/all`, method: "PUT" },
    options,
  );
};

export const getNotificationMarkReadAllMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof notificationMarkReadAll>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof notificationMarkReadAll>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["notificationMarkReadAll"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof notificationMarkReadAll>>,
    void
  > = () => {
    return notificationMarkReadAll(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type NotificationMarkReadAllMutationResult = NonNullable<
  Awaited<ReturnType<typeof notificationMarkReadAll>>
>;

export type NotificationMarkReadAllMutationError = unknown;

export const useNotificationMarkReadAll = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof notificationMarkReadAll>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof notificationMarkReadAll>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getNotificationMarkReadAllMutationOptions(options);

  return useMutation(mutationOptions);
};
export const notificationCountUnread = (
  options?: SecondParameter<typeof createInstance>,
  signal?: AbortSignal,
) => {
  return createInstance<EntityCount>(
    { url: `/notification/count-unread`, method: "GET", signal },
    options,
  );
};

export const getNotificationCountUnreadQueryKey = () => {
  return ["notification", "count-unread"] as const;
};

export const getNotificationCountUnreadQueryOptions = <
  TData = Awaited<ReturnType<typeof notificationCountUnread>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof notificationCountUnread>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof createInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = getNotificationCountUnreadQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof notificationCountUnread>>
  > = ({ signal }) => notificationCountUnread(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof notificationCountUnread>>,
    TError,
    TData
  >;
};

export type NotificationCountUnreadQueryResult = NonNullable<
  Awaited<ReturnType<typeof notificationCountUnread>>
>;
export type NotificationCountUnreadQueryError = unknown;

export function useNotificationCountUnread<
  TData = Awaited<ReturnType<typeof notificationCountUnread>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof notificationCountUnread>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getNotificationCountUnreadQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}
