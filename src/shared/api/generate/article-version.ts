/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * EScience.Application
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";
import { computed, unref } from "vue";
import type { MaybeRef } from "vue";
import type { ArticleVersion, SaveArticleTextRequest } from "../model";
import { createInstance } from "../api-instance";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const versionGetLast = (
  articleId: MaybeRef<string>,
  branchId: MaybeRef<string>,
  options?: SecondParameter<typeof createInstance>,
  signal?: AbortSignal,
) => {
  articleId = unref(articleId);
  branchId = unref(branchId);

  return createInstance<ArticleVersion>(
    { url: `/${articleId}/version/${branchId}/last`, method: "GET", signal },
    options,
  );
};

export const getVersionGetLastQueryKey = (
  articleId: MaybeRef<string>,
  branchId: MaybeRef<string>,
) => {
  return [articleId, "version", branchId, "last"] as const;
};

export const getVersionGetLastQueryOptions = <
  TData = Awaited<ReturnType<typeof versionGetLast>>,
  TError = unknown,
>(
  articleId: MaybeRef<string>,
  branchId: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof versionGetLast>>, TError, TData>
    >;
    request?: SecondParameter<typeof createInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = getVersionGetLastQueryKey(articleId, branchId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof versionGetLast>>> = ({
    signal,
  }) => versionGetLast(articleId, branchId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!(unref(articleId) && unref(branchId))),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof versionGetLast>>,
    TError,
    TData
  >;
};

export type VersionGetLastQueryResult = NonNullable<
  Awaited<ReturnType<typeof versionGetLast>>
>;
export type VersionGetLastQueryError = unknown;

export function useVersionGetLast<
  TData = Awaited<ReturnType<typeof versionGetLast>>,
  TError = unknown,
>(
  articleId: MaybeRef<string>,
  branchId: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof versionGetLast>>, TError, TData>
    >;
    request?: SecondParameter<typeof createInstance>;
  },
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getVersionGetLastQueryOptions(
    articleId,
    branchId,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const versionGetFist = (
  articleId: MaybeRef<string>,
  branchId: MaybeRef<string>,
  options?: SecondParameter<typeof createInstance>,
  signal?: AbortSignal,
) => {
  articleId = unref(articleId);
  branchId = unref(branchId);

  return createInstance<ArticleVersion>(
    { url: `/${articleId}/version/${branchId}/first`, method: "GET", signal },
    options,
  );
};

export const getVersionGetFistQueryKey = (
  articleId: MaybeRef<string>,
  branchId: MaybeRef<string>,
) => {
  return [articleId, "version", branchId, "first"] as const;
};

export const getVersionGetFistQueryOptions = <
  TData = Awaited<ReturnType<typeof versionGetFist>>,
  TError = unknown,
>(
  articleId: MaybeRef<string>,
  branchId: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof versionGetFist>>, TError, TData>
    >;
    request?: SecondParameter<typeof createInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = getVersionGetFistQueryKey(articleId, branchId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof versionGetFist>>> = ({
    signal,
  }) => versionGetFist(articleId, branchId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!(unref(articleId) && unref(branchId))),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof versionGetFist>>,
    TError,
    TData
  >;
};

export type VersionGetFistQueryResult = NonNullable<
  Awaited<ReturnType<typeof versionGetFist>>
>;
export type VersionGetFistQueryError = unknown;

export function useVersionGetFist<
  TData = Awaited<ReturnType<typeof versionGetFist>>,
  TError = unknown,
>(
  articleId: MaybeRef<string>,
  branchId: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof versionGetFist>>, TError, TData>
    >;
    request?: SecondParameter<typeof createInstance>;
  },
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getVersionGetFistQueryOptions(
    articleId,
    branchId,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const versionSave = (
  articleId: MaybeRef<string>,
  branchId: MaybeRef<string>,
  saveArticleTextRequest: MaybeRef<SaveArticleTextRequest>,
  options?: SecondParameter<typeof createInstance>,
  signal?: AbortSignal,
) => {
  articleId = unref(articleId);
  branchId = unref(branchId);
  saveArticleTextRequest = unref(saveArticleTextRequest);

  return createInstance<void>(
    {
      url: `/${articleId}/version/${branchId}/save`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: saveArticleTextRequest,
      signal,
    },
    options,
  );
};

export const getVersionSaveMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof versionSave>>,
    TError,
    { articleId: string; branchId: string; data: SaveArticleTextRequest },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof versionSave>>,
  TError,
  { articleId: string; branchId: string; data: SaveArticleTextRequest },
  TContext
> => {
  const mutationKey = ["versionSave"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof versionSave>>,
    { articleId: string; branchId: string; data: SaveArticleTextRequest }
  > = (props) => {
    const { articleId, branchId, data } = props ?? {};

    return versionSave(articleId, branchId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type VersionSaveMutationResult = NonNullable<
  Awaited<ReturnType<typeof versionSave>>
>;
export type VersionSaveMutationBody = SaveArticleTextRequest;
export type VersionSaveMutationError = unknown;

export const useVersionSave = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof versionSave>>,
    TError,
    { articleId: string; branchId: string; data: SaveArticleTextRequest },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof versionSave>>,
  TError,
  { articleId: string; branchId: string; data: SaveArticleTextRequest },
  TContext
> => {
  const mutationOptions = getVersionSaveMutationOptions(options);

  return useMutation(mutationOptions);
};
